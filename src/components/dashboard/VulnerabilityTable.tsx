
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Vulnerability } from "@/data/mockData";
import StatusBadge from "../common/StatusBadge";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { formatDistanceToNow } from "date-fns";
import { AlertTriangle, CheckCircle, HelpCircle, History, Info } from "lucide-react";

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
}

const VulnerabilityTable = ({ vulnerabilities }: VulnerabilityTableProps) => {
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return formatDistanceToNow(date, { addSuffix: true });
  };

  const getSeverityIcon = (severity: Vulnerability["severity"]) => {
    switch (severity) {
      case "critical":
        return <AlertTriangle className="h-5 w-5 text-cyber-red" />;
      case "high":
        return <AlertTriangle className="h-5 w-5 text-cyber-orange" />;
      case "medium":
        return <Info className="h-5 w-5 text-cyber-yellow" />;
      case "low":
        return <Info className="h-5 w-5 text-cyber-green" />;
      default:
        return null;
    }
  };

  const getStatusIcon = (status: Vulnerability["status"]) => {
    switch (status) {
      case "open":
        return <History className="h-4 w-4" />;
      case "fixed":
        return <CheckCircle className="h-4 w-4 text-cyber-green" />;
      case "false-positive":
        return <HelpCircle className="h-4 w-4 text-muted-foreground" />;
      default:
        return null;
    }
  };

  return (
    <Card className="glass-panel col-span-full">
      <CardHeader className="flex flex-row items-center justify-between">
        <div>
          <CardTitle>Detected Vulnerabilities</CardTitle>
          <CardDescription>
            Security issues found in your application
          </CardDescription>
        </div>
      </CardHeader>
      <CardContent>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Severity</TableHead>
              <TableHead>Type</TableHead>
              <TableHead className="w-[300px]">Name</TableHead>
              <TableHead>Path</TableHead>
              <TableHead>Detected</TableHead>
              <TableHead>Status</TableHead>
              <TableHead className="text-right">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {vulnerabilities.map((vuln) => (
              <TableRow key={vuln.id}>
                <TableCell>
                  <div className="flex items-center gap-2">
                    {getSeverityIcon(vuln.severity)}
                    <StatusBadge variant={vuln.severity} text={vuln.severity.charAt(0).toUpperCase() + vuln.severity.slice(1)} />
                  </div>
                </TableCell>
                <TableCell>{vuln.type}</TableCell>
                <TableCell className="font-medium">{vuln.name}</TableCell>
                <TableCell className="terminal-text text-xs">{vuln.path}</TableCell>
                <TableCell>{formatDate(vuln.detectionDate)}</TableCell>
                <TableCell>
                  <div className="flex items-center gap-2">
                    {getStatusIcon(vuln.status)}
                    <span className="text-sm capitalize">{vuln.status}</span>
                  </div>
                </TableCell>
                <TableCell className="text-right">
                  <Dialog>
                    <DialogTrigger asChild>
                      <Button variant="ghost" size="sm">
                        Details
                      </Button>
                    </DialogTrigger>
                    <DialogContent className="glass-panel border-cyber-blue/30 sm:max-w-[580px]">
                      <DialogHeader>
                        <DialogTitle className="flex items-center gap-2">
                          {getSeverityIcon(vuln.severity)}
                          {vuln.name}
                        </DialogTitle>
                        <DialogDescription>
                          {vuln.type} vulnerability with {vuln.severity} severity
                        </DialogDescription>
                      </DialogHeader>
                      <div className="space-y-4 py-4">
                        <div>
                          <h4 className="text-sm font-medium mb-1">Description</h4>
                          <p className="text-sm">{vuln.description}</p>
                        </div>
                        <div>
                          <h4 className="text-sm font-medium mb-1">Endpoint</h4>
                          <code className="terminal-text text-xs bg-background px-2 py-1 rounded">{vuln.path}</code>
                        </div>
                        <div>
                          <h4 className="text-sm font-medium mb-1">Remediation</h4>
                          <p className="text-sm">{vuln.remediation}</p>
                        </div>
                        <div className="flex items-center justify-between">
                          <div>
                            <h4 className="text-sm font-medium mb-1">Detection Date</h4>
                            <p className="text-sm">{new Date(vuln.detectionDate).toLocaleString()}</p>
                          </div>
                          <div>
                            <h4 className="text-sm font-medium mb-1">Status</h4>
                            <div className="flex items-center gap-2">
                              {getStatusIcon(vuln.status)}
                              <span className="text-sm capitalize">{vuln.status}</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </DialogContent>
                  </Dialog>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
};

export default VulnerabilityTable;
